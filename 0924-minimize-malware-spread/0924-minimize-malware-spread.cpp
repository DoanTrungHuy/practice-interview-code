#define MN 301
int parent[MN];

class Solution {
public:
    int find(int u) {
        return parent[u] = ((u == parent[u]) ? u : find(parent[u]));
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        const int n = graph.size();
        
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (graph[i][j]) {
                    parent[find(i)] = find(j);
                }
            }
        }
        
        unordered_map<int, int> cnt, cnt_infected ;
        
        for (int i = 0; i < n; ++i) {
            cnt[find(i)]++;
        }
        
        for (int node : initial) {
            cnt_infected[find(node)]++;
        }
        
        sort(initial.begin(), initial.end());
        
        int ans = -1;
        int max_val = 0;
        
        for (int node : initial) {
            int root = find(node);
            if (cnt_infected[root] > 1) {
                continue;
            }
            if (max_val < cnt[root]) {
                ans = node;
                max_val = cnt[root];
            }
        }
        
        return ans == -1 ? initial[0] : ans;
    }
};