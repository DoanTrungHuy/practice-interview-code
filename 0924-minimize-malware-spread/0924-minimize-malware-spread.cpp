class DSU {
private:
    vector<int> parent;
    
public:
    DSU() {
        
    }
    
    DSU(int n) {
        parent.resize(n);
        for (int i = 0; i < n; ++i) {
            parent[i] = i;
        }
    }
    
    int find(int u) {
        if (parent[u] != u) {
            parent[u] = find(parent[u]);
        }
        return parent[u];
    }
    
    void _union(int u, int v) {
        int pu = find(u);
        int pv = find(v);
        
        if (pu != pv) {
            parent[pu] = pv;
        }
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        
        DSU dsu(n);
        
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                if (graph[i][j]) {
                    dsu._union(i, j);
                }
            }
        }
        
        unordered_map<int, int> partition_resident, partition_infected;
        
        for (int p = 0; p < n; ++p) {
            partition_resident[dsu.find(p)]++;
        }
        
        for (int p : initial) {
            partition_infected[dsu.find(p)]++;
        }
        
        sort(initial.begin(), initial.end());
        
        int mima_person = initial[0];
        int max_area = 0;
        
        for (int p : initial) {
            int pp = dsu.find(p);
            
            if (partition_infected[pp] > 1) {
                continue;
            }
            
            if (max_area < partition_resident[pp]) {
                max_area = partition_resident[pp];
                mima_person = p;
            }
        }
        
        return mima_person;
    }
};